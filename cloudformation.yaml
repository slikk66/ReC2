---
- name: provision stack
  hosts: all
  connection: local

  vars:
    working_dirs:
      - json
      - tmp
      - lambda

  tasks:

  - name: include vars
    include_vars: vars.yaml

  - name: Create the temporary directories
    file: dest={{ item }} state=directory
    with_items: "{{ working_dirs }}"

  - name: Generate CloudFormation templates from troposphere
    local_action: >
      shell python {{ item }} > {{ playbook_dir }}/json/{{ item | basename | replace('.py', '.json') }}
    with_fileglob:
      - "{{ playbook_dir }}/templates/*.py"

  - name: Validate the cloudformation descriptions
    local_action: >
        shell aws cloudformation validate-template --region {{ region }} --template-body file://{{ item }} --output text
    with_fileglob:
      - "{{ playbook_dir }}/json/*.json"

  - name: set fact for time_token
    set_fact: time_token="{{ ansible_date_time.iso8601 }}"

  - name: Create Lambda Role
    cloudformation: >
        stack_name="{{ stack_prefix }}-role"
        state=present
        region="{{region}}"
        template={{ playbook_dir }}/json/iam-assets.json
    register: iam

  - name: Create Lambda Bucket
    cloudformation: >
        stack_name="{{ stack_prefix }}-bucket"
        state=present
        region="{{region}}"
        template={{ playbook_dir }}/json/s3.json
    register: s3

  - name: Create Alarms
    cloudformation: >
        stack_name="{{ stack_prefix }}-alarms"
        state=present
        region="{{region}}"
        template={{ playbook_dir }}/json/alarms.json
    args:
        template_parameters:
            AsgIdentifier: "{{ asg_identifier }}"
            DownThreshold: "{{ scale_down['threshold'] }}"
            DownEvaluations: "{{ scale_down['alarm_duration'] }}"
            CreditThreshold: "{{ credits['threshold'] }}"
            CreditEvaluations: "{{ credits['alarm_duration'] }}"
            DragThreshold: "{{ drag['threshold'] }}"
            DragEvaluations: "{{ drag['alarm_duration'] }}"
    register: alarms

  - name: Write output of the alarm names to vars
    copy: content="---\nalarm_drag{{ ':' }} {{ alarms['stack_outputs']['DragAlarm'] }}\nalarm_low_cpu{{ ':' }} {{ alarms['stack_outputs']['CpuLowAlarm'] }}\nalarm_credits{{ ':' }} {{ alarms['stack_outputs']['CreditLowAlarm'] }}\n..." dest="{{ playbook_dir }}/tmp/alarms.yaml"

  - name: Unzip deps
    shell: cp {{ playbook_dir }}/rec2/deps.zip {{ playbook_dir }}/lambda && cd {{ playbook_dir }}/lambda && unzip deps.zip

  - name: Copy script into working folder
    local_action: >
      shell cp {{ playbook_dir }}/rec2/rec2.py {{ playbook_dir }}/lambda/rec2.py

  - name: Create local zip
    local_action: >
      shell cd {{ playbook_dir }}/lambda && zip -r {{ playbook_dir }}/tmp/rec2-{{ time_token }}.zip ./* && zip -j {{ playbook_dir }}/tmp/rec2-{{ time_token }}.zip {{ playbook_dir }}/vars.yaml {{ playbook_dir }}/tmp/alarms.yaml

  - name: Upload python files to S3 bucket
    local_action: >
      shell aws --region {{region}} s3 cp {{ playbook_dir }}/tmp/rec2-{{ time_token }}.zip s3://{{ s3['stack_outputs']['BucketName'] }}

  - name: Create Lambda Function
    cloudformation: >
        stack_name="{{ stack_prefix }}-lambda"
        state=present
        region="{{region}}"
        template={{ playbook_dir }}/json/lambda-function.json
    args:
        template_parameters:
            TimeToken: "{{ time_token }}"
            BucketName: "{{ s3['stack_outputs']['BucketName'] }}"
            LambdaRole: "{{ iam['stack_outputs']['LambdaRole'] }}"
    register: lambda

  - name: Create Event
    cloudformation: >
        stack_name="{{ stack_prefix }}-event-source"
        state=present
        region="{{region}}"
        template={{ playbook_dir }}/json/event-source.json
    args:
        template_parameters:
            LambdaArn: "{{ lambda['stack_outputs']['LambdaFunctionArn'] }}"
    register: lambda

  - name: Clean up after ourselves
    file: path="{{ playbook_dir }}/{{ item }}" state=absent
    with_items: "{{ working_dirs }}"

...
